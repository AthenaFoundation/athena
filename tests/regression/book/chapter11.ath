#==========================================================================
# SECTION: Defining the algorithm
#
#set-flag print-var-sorts "off"

define stopgap := force

load "search/binary-search-tree-nat"

extend-module BinTree {

  declare binary-search: [N (BinTree N)] -> (BinTree N)

  module binary-search {
# # ...

assert axioms :=
  (fun
   [(binary-search x (node L y R)) =
        [(node L y R)         when (x = y)
         (binary-search x L)  when (x < y)
         (binary-search x R)  when (x =/= y & ~ x < y)]
    (binary-search x null) = null])

define [at-root go-left go-right empty] := axioms

assert* at-root := 
  (x = y ==> (binary-search x (node L y R)) = (node L y R))

assert* go-left := 
  (x < y ==> (binary-search x (node L y R)) = (binary-search x L))

assert* go-right :=
  (x =/= y & ~ x < y 
   ==> (binary-search x (node L y R)) = (binary-search x R))

assert* empty := ((binary-search x null) = null)

#==========================================================================
# SUBSECTION: Efficiency considerations
#
#==========================================================================
# SUBSECTION: Correspondence to definitions in other languages
#
#==========================================================================
# SUBSECTION: Interface design
#
#==========================================================================
# SUBSECTION: Testing with evaluation
#
} # close module binary-search

define nat-tree->int-tree :=
  lambda (T)
    match T {
      (node L x R) => (node (nat-tree->int-tree L) 
                            (nat->int x)
                            (nat-tree->int-tree R))
    | null:(BinTree N) => null:(BinTree Int)
    | _ => T
    }

define int-tree->nat-tree :=
  lambda (T)
    match T {
      (node L x R) => (node (int-tree->nat-tree L) 
                            (int->nat x)
                            (int-tree->nat-tree R))
    | null:(BinTree Int) => null:(BinTree N)
    | _ => T
    }

define tree1 :=
  (node (node null
              2
              (node (node null
                          3
                          null)
                    5
                    null))
        7
        (node (node null
                    11
                    null)
              13
              null))

expand-input binary-search [int->nat int-tree->nat-tree]
transform-output eval [nat-tree->int-tree]

(eval (binary-search 5 tree1))

# Term: (node (node null))
#                   3
#                   null)
#             5
#             null)
# 
(eval (binary-search 11 tree1))

# Term: (node null
#             11
#             null)
# 
(eval (binary-search 12 tree1))

# Term: null

#==========================================================================
# SECTION: First correctness properties
#
extend-module binary-search {

  define found :=
    (forall T . BST T ==> 
      forall x L y R . (binary-search x T) = (node L y R) ==> x = y & x in T)

  define not-found :=
    (forall T . BST T ==> forall x . (binary-search x T) = null ==> ~ x in T)

define tree-axioms := (datatype-axioms "BinTree")

define (binary-search-found-base) :=
 conclude (BST null ==>
             forall x L y R .
               (binary-search x null) = (node L y R)
               ==> x = y & x in null)
    assume (BST null)
      pick-any x:N L:(BinTree N) y:N R:(BinTree N)
        assume i := ((binary-search x null) = (node L y R))
          let {p := (!chain [null:(BinTree N) 
                           = (binary-search x null)    [empty]
                           = (node L y R)              [i]]);
               -p := (!chain-> [true                  
                           ==> (null =/= (node L y R)) [tree-axioms]])}
          (!from-complements (x = y & x in null) p -p)

(!binary-search-found-base)

# Theorem: (if (BinTree.BST null)
#              (forall ?x:N
#                (forall ?L:(BinTree N)
#                  (forall ?y:N
#                    (forall ?R:(BinTree N)
#                      (if (= (BinTree.binary-search ?x
#                                                    null)
#                             (node ?L
#                                   ?y
#                                   ?R))
#                          (and (= ?x ?y)
#                               (BinTree.in ?x
#                                           null))))))))

define [x1 y1 L1 R1] := [?x1:N ?y1:N ?L1:(BinTree N) ?R1:(BinTree N)]

define (found-property T) := 
  (forall x L1 y1 R1 .
     (binary-search x T) = (node L1 y1 R1) ==> x = y1 & x in T)

define binary-search-found-step :=
 method (T)
   match T {
     (node L:(BinTree N) y:N R:(BinTree N)) =>
       let {[ind-hyp1 ind-hyp2] := [(BST L ==> found-property L)
                                    (BST R ==> found-property R)]}
       assume hyp := (BST T)
         conclude (found-property T)
          let {p0 := (BST L & 
                      (forall x . x in L ==> x <= y) &
                      BST R & 
                      (forall z . z in R ==> y <= z));
               _ := (!chain-> [hyp ==> p0                  [BST.nonempty]]);
               fpl := (!chain-> [p0 ==> (BST L)            [prop-taut]
                                    ==> (found-property L) [ind-hyp1]]);
               fpr := (!chain-> [p0 ==> (BST R)            [prop-taut]
                                    ==> (found-property R) [ind-hyp2]])}
             pick-any x:N L1 y1:N R1
               let {subtree := (node L1 y1 R1)}
                assume hyp' := ((binary-search x T) = subtree)
                 conclude (x = y1 & x in T)
                   (!two-cases
                     assume (x = y) 
                       (!both conclude (x = y1) 
                                (!chain->
                               [T = (binary-search x T)    [at-root]
                                  = subtree                [hyp']
                                  ==> (y = y1)             [tree-axioms]
                                  ==> (x = y1)             [(x = y)]])
                              conclude (x in T) 
                                   (!chain-> [(x = y) 
                                          ==> (x in T)     [in.root]]))
                     assume (x =/= y) 
                        (!two-cases
                          assume (x < y)
                            (!chain-> [(binary-search x L)
                                     = (binary-search x T) [go-left]
                                     = subtree             [hyp']
                                   ==> (x = y1 & x in L)   [fpl]
                                   ==> (x = y1 & x in T)   [in.left]])
                          assume (~ x < y) 
                            (!chain-> [(binary-search x R)
                                     = (binary-search x T) [go-right]
                                     = subtree             [hyp']
                                   ==> (x = y1 & x in R)   [fpr]
                                   ==> (x = y1 & x in T)   [in.right]])))
    }

by-induction found {
    null => (!binary-search-found-base)
  | (T as (node _ _ _)) => (!binary-search-found-step T)
  }

# Theorem: (forall ?T:(BinTree N)
#            (if (BinTree.BST ?T)
#                (forall ?x:N
#                  (forall ?L:(BinTree N)
#                    (forall ?y:N
#                      (forall ?R:(BinTree N)
#                        (if (= (BinTree.binary-search ?x
#                                                      ?T)
#                               (node ?L
#                                     ?y
#                                     ?R))
#                            (and (= ?x ?y)
#                                 (BinTree.in ?x
#                                             ?T)))))))))

define (not-found-prop T) := 
  (forall x . (binary-search x T) = null ==> ~ x in T)

by-induction not-found {
  null => 
    assume (BST null)
      conclude (not-found-prop null)
        pick-any x:N
          assume ((binary-search x null) = null)
            (!chain-> [true ==> (~ x in null)    [in.empty]])
| (T as (node L y:N R)) => 
    let {[p1 p2]             := [(not-found-prop L) (not-found-prop R)];
	 Less=-tricho-4      := N.Less=.trichotomy4;
         [ind-hyp1 ind-hyp2] := [(BST L ==> p1) (BST R ==> p2)]}
    assume hyp := (BST T)
      conclude (not-found-prop T)
        let {smaller-in-left := (forall x . x in L ==> x <= y);
             larger-in-right := (forall z . z in R ==> y <= z);
             p0 := (BST L & 
                    smaller-in-left & 
                    BST R & 
                    larger-in-right);
             _ := (!chain-> [hyp ==> p0               [BST.nonempty]]);
             _ := (!chain-> [p0 ==> smaller-in-left   [prop-taut]]);
             _ := (!chain-> [p0 ==> larger-in-right   [prop-taut]]);
             _ := (!chain-> [p0 
                         ==> (BST L)                  [prop-taut]
                         ==> (not-found-prop L)       [ind-hyp1]]);
             _ := (!chain-> [p0 
                         ==> (BST R)                  [prop-taut]
                         ==> (not-found-prop R)       [ind-hyp2]])}
        pick-any x 
          assume hyp' := ((binary-search x T) = null)
            (!by-contradiction (~ x in T)
              assume (x in T)
                let {disj := (!chain-> [(x in T)
                                    ==> (x = y  | 
                                         x in L | 
                                         x in R)      [in.nonempty]])}
                (!two-cases
                  assume (x = y) 
                   (!absurd
                     (!chain [null:(BinTree N) 
                            = (binary-search x T)     [hyp']
                            = T                       [at-root]])
                     (!chain-> [true 
                            ==> (null =/= T)          [tree-axioms]]))
                 assume (x =/= y) 
                   (!two-cases
                    assume (x < y) 
                      (!cases disj
                        assume (x = y)
                          (!absurd (x = y) (x =/= y)) 
                        assume (x in L) 
                          (!absurd 
                            (x in L)
                            (!chain->
                             [(binary-search x L)
                            = (binary-search x T)     [go-left]
                            = null                    [hyp']
                          ==> (~ x in L)              [p1]]))
                        assume (x in R) 
                          (!absurd 
                            (x < y) 
                            (!chain-> 
                              [(x in R)
                           ==> (y <= x)               [larger-in-right]
                           ==> (~ x < y)              [Less=-tricho-4]])))
                    assume (~ x < y) 
                      (!cases disj
                       assume (x = y)
                         (!absurd (x = y) (x =/= y))
                       assume (x in L) 
                         (!absurd 
                          (x =/= y)
                          (!chain-> [(x in L)
                                 ==> (x <= y)          [smaller-in-left]
                                 ==> (x < y | x = y)   [N.Less=.definition]
                                 ==> (~ x < y & 
                                      (x < y | x = y)) [augment]
                                 ==> (x = y)           [prop-taut]]))
                       assume (x in R) 
                         (!absurd 
                           (x in R)
                           (!chain-> 
                            [(binary-search x R)
                           = (binary-search x T)      [go-right]
                           = null                     [hyp']
                         ==> (~ x in R)               [p2]]))))))
} # by-induction

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.1:
#
(!stopgap not-found)

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#==========================================================================
# SECTION: Specifying requirements on a function to be defined
#
#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.2:
#
define not-in-implies-null-result :=
  (forall T . BST T ==> forall x . ~ x in T ==> (binary-search x T) = null)

(!stopgap not-in-implies-null-result)

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.3:
#
define not-found-iff-not-in :=
 (forall T . BST T ==> forall x . (binary-search x T) = null <==> ~ x in T)

(!stopgap not-found-iff-not-in)

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.4:
#
define in-implies-node-result :=
  (forall T .
     BST T ==>
       forall x .
         x in T ==> exists L R . (binary-search x T) = (node L x R))

(!stopgap in-implies-node-result)

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.5:
#
#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#==========================================================================
# SECTION: Correctness of an optimized binary search algorithm
#
assert axioms :=
  (fun
   [(binary-search x (node L y R)) =
        [(binary-search x L)  when (x < y) 
         (binary-search x R)  when (y < x) 
         (node L y R)         when (~ x < y & ~ y < x)]
    (binary-search x null) = null])

define [go-left go-right at-root empty] := axioms

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.6:
#
#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.7:
#
#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.8:
#
define at-root' :=
  (forall x L y R .
    x = y ==> (binary-search x (node L y R)) = (node L y R))

define go-right' :=
  (forall x L y R .
    x =/= y & ~ x < y ==>
    (binary-search x (node L y R)) = (binary-search x R))

(!stopgap at-root')

(!stopgap go-right')

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

  } # close module binary-search
} # close module BinTree

#==========================================================================
# SECTION: Summary and looking ahead
#
#==========================================================================
# SECTION: Additional exercises
#
#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.9:
#
extend-module List {
  define [L x y x'] := [?L:(List 'S) ?x:'S ?y:'S ?x':'S] 
  declare replace: (S) [(List S) S S] -> (List S)
# module replace {
#   assert axioms :=
#     (fun
#       ...
# } # close module replace
} # close module List

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# exercise 11.10:
#
extend-module List {
  define sanity-check1 :=
    (forall L x y . x =/= y  ==> (count x (replace L x y)) = zero)    
  define sanity-check2 :=
    (forall L x y .
      x =/= y  ==> (count y (replace L x y)) = (count x L) + (count y L))
} # close module List

extend-module List {

  (!stopgap sanity-check1)

  (!stopgap sanity-check2)

} # close module List

#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

#[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
# Exercise 11.11:
#
#]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

