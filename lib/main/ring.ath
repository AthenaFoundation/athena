# Ring theories

load "group"

module Ring {
  define [+ * <0> U- -] := [Semigroup.+ MSG.* Identity.<0> Group.U- Group.-]
  define right-distributive := 
    (forall x y z . (x + y) * z = x * z + y * z)
  define left-distributive := 
    (forall x y z . z * (x + y) = z * x + z * y)
  define theory := 
    (make-theory ['Abelian-Group 'MSG] 
                 [right-distributive left-distributive])
}

module Commutative-Ring {
  define [+ * <0> U- -] := [Semigroup.+ MSG.* Identity.<0> Group.U- Group.-]
  define *commutative := (forall x y . x * y = y * x)
  define theory := (make-theory ['Ring] [*commutative])
} 

module Ring-With-Identity {
  define [+ * <0> U- - <1>] := 
	 [Semigroup.+ MSG.* Identity.<0> Group.U- Group.- MM.<1>]
  define theory := (make-theory ['MM 'Ring] [])
} 

module Commutative-Ring-With-Identity {
  define [+ * <0> U- - <1>] := 
	 [Semigroup.+ MSG.* Identity.<0> Group.U- Group.- MM.<1>]
  define theory :=
    (make-theory ['Ring-With-Identity 'Commutative-Ring] []) 
}
